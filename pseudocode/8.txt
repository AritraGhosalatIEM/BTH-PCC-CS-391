Define a structure called "Node" with two attributes: "op" (character) and "next" (pointer to the next Node).

Define a function called "precedence" that takes a character as input and returns an unsigned integer. The function checks the input character and returns a value based on its precedence.

2.1. If the character is '-' or '+', return 1.
2.2. If the character is '*', '/' or '%', return 2.
2.3. If the character is '(', return 3.
2.4. Otherwise, return 0.

Define the main function with the following parameters: "argc" (integer) and "argv" (pointer to an array of strings). The function returns an integer.

3.1. Get the length of the first command-line argument (argv[1]) and store it in the variable "len".
3.2. Allocate memory for a Node called "top".
3.3. Set the "next" attribute of "top" to NULL.
3.4. Set the "op" attribute of "top" to '('.
3.5. Allocate memory for a Node pointer called "expression".
3.6. Create a Node double pointer called "tail" and set it to the address of "expression".
3.7. Declare the variables "c" (character), "p" (unsigned integer), and "new" (Node pointer).
3.8. Iterate from 0 to len-1 (inclusive) with the variable "i".
    3.8.1. Set "c" to the i-th character of the first command-line argument (argv[1][i]).
    3.8.2. Check if "c" is an alphabetic character.
           3.8.2.1. If it is, allocate memory for a Node and set its "op" attribute to "c".
                    Set its "next" attribute to NULL.
                    Set the "next" attribute of the node pointed by "tail" to the newly created Node.
                    Update the value of "tail" to the address of the "next" attribute of the newly created Node.
    3.8.3. Check if "c" is a blank character.
           3.8.3.1. If it is, continue to the next iteration.
    3.8.4. Check if "c" is a closing parenthesis ')'.
           3.8.4.1. If it is, perform the following steps until the "op" attribute of "top" is an opening parenthesis '(':
                     3.8.4.1.1. Set the "next" attribute of the node pointed by "tail" to "top".
                     3.8.4.1.2. Set "top" to the "next" attribute of "top".
                     3.8.4.1.3. Set the "next" attribute of the node pointed by "tail" to NULL.
                     3.8.4.1.4. Update the value of "tail" to the address of the "next" attribute of the node pointed by "tail".
                     3.8.4.1.5. Free the memory allocated for the node pointed by "top".
    3.8.5. Otherwise, perform the following steps until the "op" attribute of "top" is an opening parenthesis '(', or the precedence of "c" is greater than the precedence of the "op" attribute of "top":
           3.8.5.1. Set the "next" attribute of the node pointed by "tail" to "top".
           3.8.5.2. Set "top" to the "next" attribute of "top".
           3.8.5.3. Set the "next" attribute of the node pointed by "tail" to NULL.
           3.8.5.4. Update the value of "tail" to the address of the "next" attribute of the node pointed by "tail".
    3.8.6. Allocate memory for a Node called "new".
           3.8.6.1. Set its "op" attribute to "c".
           3.8.6.2. Set its "next" attribute to "top".
           3.8.6.3. Set "top" to "new".
3.9. Perform the following steps until the "op" attribute of "top" is an opening parenthesis '(':
    3.9.1. Set the "next" attribute of the node pointed by "tail" to "top".
    3.9.2. Set "top" to the "next" attribute of "top".
    3.9.3. Set the "next" attribute of the node pointed by "tail" to NULL.
    3.9.4. Update the value of "tail" to the address of the "next" attribute of the node pointed by "tail".
3.10. Iterate through "expression" as long as it is not NULL:
     3.10.1. Print the "op" attribute of the current Node.
3.11. Print a newline character.
3.12. Return 0.